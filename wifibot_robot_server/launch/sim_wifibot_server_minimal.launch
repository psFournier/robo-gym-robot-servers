<?xml version="1.0" ?>
<launch>

    <!-- these are the arguments you can pass this launch file, for example paused:=true -->
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="rviz_gui" default="false"/>
    <arg name="gui"  default="false"/>
    <arg name="world_name"  default="target_only"/>
    <arg name="server_port" default="50051"/>

    <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find wifibot_robot_server)/worlds/$(arg world_name).world"/>
        <arg name="gui" value="$(arg gui)" />
        <arg name="paused" value="$(arg paused)"/>
        <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    </include>

    <arg name="x" default="0.0"/>
    <arg name="y" default="-2.0"/>
    <arg name="z" default="0.1"/>

    <arg name="robot_name" default="wifibot"/>
    <arg name="sensor_list" default="lidar camera bumper"/>
    <arg name="enable_ground_truth" default="false" />
    <arg name="gpu" default="false" />
    <arg name="model_description" default="$(find wifibot_robot_server)/urdf/wifibot.gazebo.xacro"/>
    <param name="robot_description" command="$(find xacro)/xacro '$(arg model_description)'
                sensor_list:='$(arg sensor_list)'
                enable_ground_truth:='$(arg enable_ground_truth)'
                gpu:='$(arg gpu)'
            "
    />

    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
    <node name="spawn_$(arg robot_name)" pkg="gazebo_ros" type="spawn_model"
        args="-param robot_description
            -urdf
            -x $(arg x)
            -y $(arg y)
            -z $(arg z)
            -model $(arg robot_name)"
        respawn="false" output="screen">
    </node>

    <rosparam command="load" file="$(find wifibot_robot_server)/launch/control.yaml"/>

    <node name="spawner" pkg="controller_manager" type="spawner" args="joint_state_controller velocity_controller">
<!--     <node name="spawner" pkg="controller_manager" type="spawner" args="joint_state_controller"> -->
    </node>

<!--     <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"> -->
<!--         <param name="use_gui" value="TRUE"/> -->
<!--         <rosparam param="source_list">[wifibot/joint_states]</rosparam> -->
<!--     </node> -->

    <!-- Combine joint values -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
    </node>

    <!-- Launch fake localization node -->
    <node pkg="fake_localization" type="fake_localization" name="fake_localization" output="screen" >
        <remap from="base_pose_ground_truth" to="/velocity_controller/odom"/>
<!--         <param name="global_frame_id" value="map"/> -->
<!--         <param name="odom_frame_id" value="wifibot/odom"/> -->
        <param name="base_frame_id" value="wifibot/base_link"/>
    </node>

    <!-- Moving the robot in circles -->
<!--     <node name="move_wifibot" pkg="wifibot_robot_server" type="test.py" respawn="false" output="screen"> -->
<!--     </node> -->

<!--     Launch robot_pose publisher -->
    <node name="robot_pose_publisher" pkg="wifibot_robot_server" type="robot_pose_publisher.py" respawn="false" output="screen">
    </node>

<!--     Launch Command Handler -->
    <node name="cmd_vel_command_handler" pkg="wifibot_robot_server" type="cmd_vel_command_handler.py" respawn="false" output="screen">
        <param name="action_cycle_rate" value="10"></param>
    </node>

<!--     Launch gRPC server  -->
    <node name="robot_server" pkg="wifibot_robot_server" type="robot_server.py" respawn="false" output="screen">
    <param name="server_port" value="$(arg server_port)"></param>
    <param name="real_robot"  value="false"></param>
    </node>

    <!-- Launch RViz -->
    <node if="$(arg rviz_gui)" name="rviz" pkg="rviz" type="rviz" args="-d $(find wifibot_robot_server)/rviz/wifibot.rviz">
    </node>

</launch>